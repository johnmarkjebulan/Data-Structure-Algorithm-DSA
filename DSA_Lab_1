#include <iostream>
using namespace std;

int myArray[30];
int numElem = 0;
int maxElem = 20;

void bubbleSort(){
    int i, j;
    bool swapped;
    for(int i = 0; i < numElem - 1; i++){
        swapped = false;
        for(j = 0; j < numElem - i - 1; j++){
            if(myArray[j] > myArray[j+1]){
                swap(myArray[j], myArray[j+1]);
                swapped = true;
            }
        }
        if(swapped == false){
            break;
        }
    }
}
string insertAtSortedArray(int num){
    if(numElem != maxElem){
        bubbleSort();
        int position;
        for( int i = 0; i< numElem; i++){
            if(num < myArray[i]){
                position = i;
                break;
            }
        }
        for (int i = numElem; i >=position; i--){
            myArray[i+1] = myArray[i];
        }
        myArray[position] = num;
        numElem++;
        return "An element is successfully inserted at a sorted array! \n";
    }
    return "The array is full. Please remove elements before inserting new one. \n"; 
    
}
int binarySearch(int num, int lowest, int highest){
    while(lowest <= highest){
        int middle = lowest + ((highest - lowest)/2);
        
        if(myArray[middle]== num){
            return middle;
        }
        if (myArray[middle]< num){
            lowest = middle + 1;
        }
        else{
            highest = middle - 1;
        }
    }
    return -1;
}

void traverseArray(){
	cout << "Showing elements in my array \n";
	for (int i = 0; i< numElem; i++){
		cout<< to_string(myArray[i]) + " | ";
	}
	cout << "\n";
}
    string insertAtTheEnd(int num){
	    if (numElem != maxElem){
	    myArray[numElem] = num;
	    numElem++;
	    return "An element is successfully inserted at the end! \n";
	}
	 return "The array is full. Please remove elements before inserting new one. \n";
   }
   

string insertAtTheBeginning(int num){
    if(numElem != maxElem){
    for(int i = numElem; i>=0; i--){
        myArray[i+1] = myArray[i];
    }
    
    myArray[0] =num;
    numElem++;
    return "An Element is succesfully inserted at the beginning! \n";
}
    return "The array if full. Please remove elements before inserting new one. \n";
}

string insertAtTheGivenPosition(int num, int ElementAfter){
    if(numElem != maxElem){
        int position = binarySearch(ElementAfter,numElem,maxElem);
    
    
    for(int i = numElem; i>=position; i--){
    myArray[i+1] = myArray[i];
}
myArray[position + 1] = num;
numElem++;
return "An element is successfully inserted at the specified location! \n";
    }
return "The array is full. Please remove elements before inserting new one. \n";
}
string deleteFromTheEnd(){
    if(numElem != 0){
        numElem--;
        return "An element has been deleted from the end!";
    }
    return "The array is undeflow! Delete is not possible";
}

string deleteFromTheBeginning(){
    if(numElem != 0){
        for(int i = 0; i<= numElem; i++ ){
        myArray[i] = myArray[i+1];
     }
        numElem--;
        return "An Element has been deleted from the beginning!";
    }
    return "The array is underflow! Delete is not possible";
}

string deleteFromGivenElement(int element){
    if(numElem != 0){
        int index = binarySearch(element, 0, maxElem);
       
        for (int i = index; i <= numElem; i++){
            myArray[i] = myArray[i+1];
        }
        numElem--;
        return to_string(element) + "has been deleted!";
    }
    return "The array is underflow! Delete is not possible";
}

int main(){
    
    cout << insertAtTheEnd(3);
	cout << insertAtTheEnd(7);
	cout << insertAtTheEnd(9);
	cout << insertAtTheEnd(11);
	cout << insertAtTheEnd(15);
	traverseArray();
	cout << insertAtTheBeginning(3);
    cout << insertAtTheEnd(7);
    cout << insertAtTheEnd(9);
    cout << insertAtTheBeginning(20);
    cout << insertAtTheGivenPosition(37,7);
    cout << insertAtTheBeginning(256);
    cout << insertAtTheGivenPosition(128,9);
    cout << insertAtTheBeginning(19);
    traverseArray();
    bubbleSort();
    cout << insertAtSortedArray(3);
    cout << insertAtSortedArray(30);
    cout << insertAtSortedArray(38);
    cout << insertAtSortedArray(19);
    traverseArray();
    bubbleSort();
    deleteFromTheBeginning();
    deleteFromTheBeginning();
    deleteFromTheEnd();
    deleteFromTheEnd();
    deleteFromGivenElement(19);
    deleteFromGivenElement(7);
    traverseArray();
    cout << "Result for Binary Search" <<endl;
    cout << binarySearch(20, 0, 20) <<endl;
    cout << binarySearch(38, 0, 20) <<endl;
	return 0;
}
